{"version":3,"sources":["../../../src/panels/incident-list/module.js"],"names":[],"mappings":"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","file":"module.js","sourcesContent":["import _ from 'lodash';\nimport moment from 'moment';\nimport {MetricsPanelCtrl} from 'app/plugins/sdk';\nimport {bosunIncidentListPanelEditor} from './editor';\n\nvar statusMap = {\n    \"normal\": 0,\n    \"warning\": 1,\n    \"critical\": 2,\n    \"unknown\": 3\n}\n\nexport class BosunIncidentListCtrl extends MetricsPanelCtrl {\n    constructor($scope, $injector, $rootScope, datasourceSrv, templateSrv, utilSrv, backendSrv) {\n        super($scope, $injector);\n        var self = this;\n        this.datasourceSrv = datasourceSrv;\n\n        this.templateSrv = templateSrv;\n        this.$rootScope = $rootScope;\n        this.linkUrl = \"\";\n        this.incidentList = [];\n        this.refreshData = this.refreshData.bind(this);\n        this.refreshData();\n        this.utilSrv = utilSrv;\n        this.bodyHTML = \"\";\n        this.reversedFields = {};\n        this.showHelp = 0;\n        backendSrv.get('/api/user').then(user => {\n            console.log(this)\n            this.user = user;\n        });\n\n    }\n\n\n\n    onInitMetricsPanelEditMode() {\n        this.addEditorTab('Options', bosunIncidentListPanelEditor, 2);\n    }\n\n    refresh() {\n        this.onMetricsPanelRefresh();\n    }\n\n    onMetricsPanelRefresh() {\n        // ignore fetching data if another panel is in fullscreen\n        if (this.otherPanelInFullscreenMode()) { return; }\n        this.refreshData();\n    }\n\n    sortIncidents(property, reverse) {\n        this.incidentList = _.sortBy(this.incidentList, property)\n        this.reversedFields[property] = this.reversedFields[property] == false;\n        if (this.reversedFields[property]) {\n            this.incidentList.reverse()\n        }\n    }\n\n    sortIncidentsByStatus(property) {\n        this.incidentList = _.sortBy(this.incidentList, (incident) => {\n            return statusMap[incident[property]];\n        });\n\n        this.reversedFields[property] = this.reversedFields[property] == false;\n        if (this.reversedFields[property]) {\n            this.incidentList.reverse()\n        }\n    }\n\n    refreshData() {\n        var query = this.panel.query;\n        var that = this;\n        return this.datasourceSrv.get(this.panel.datasource)\n            .then(datasource => {\n                datasource.IncidentListQuery(query).then((data) => {\n                    data = _.each(data, (item) => {\n                        item.incidentLink = datasource.annotateUrl + \"/incident?id=\" + item.Id;\n                        item.bodyHTML = \"\";\n                        return item;\n                    })\n                    that.incidentList = data;\n                })\n            });\n    }\n\n    fmtTime(unixTS, relativeOnly) {\n        var m = moment.unix(unixTS);\n        var relative = '(' + m.fromNow() + ')'\n        if (relativeOnly) {\n            return relative;\n        }\n        return m.format('YYYY-MM-DD HH:mm:ss ') + relative;\n    }\n\n    statusClass(prefix, status) {\n        switch (status) {\n            case \"critical\": return prefix + \"error\";\n            case \"unknown\": return prefix + \"info\";\n            case \"warning\": return prefix + \"warning\";\n            case \"normal\": return prefix + \"success\";\n            default: return prefix + \"error\";\n        }\n    };\n\n    showActions(incident) {\n        var modalScope = this.$scope.$new();\n        modalScope.actions = incident.Actions;\n        this.utilSrv.showModal(event, {\n            src: \"public/plugins/bosun-app/panels/incident-list/modal_actions.html\",\n            scope: modalScope\n        });\n    }\n\n    showEvents(incident) {\n        var modalScope = this.$scope.$new();\n        modalScope.events = incident.Events.reverse();\n        this.utilSrv.showModal(event, {\n            src: \"public/plugins/bosun-app/panels/incident-list/modal_events.html\",\n            scope: modalScope\n        });\n    }\n\n    multiAction() {\n        if (!this.selectedMultiAction) {\n            return\n        }\n        var incidents = _.filter(this.incidentList, (incident) => {\n            return incident.selected == true;\n        })\n        if (incidents.length == 0) {\n            return\n        }\n        for (var i of incidents) {\n            if (this.selectedMultiAction == \"forget\") {\n                if (i.CurrentStatus != \"unknown\") {\n                    this.$rootScope.appEvent('alert-error', [\"Action Error\", 'can not forget an alert that is not currently unknown: ' + i.AlertName + i.TagsString])\n                    return\n                }\n            }\n            if (this.selectedMultiAction == \"close\") {\n                if (i.CurrentStatus != \"normal\") {\n                    this.$rootScope.appEvent('alert-error', [\"Action Error\", 'can not close an alert that is not currently normal: ' + i.AlertName + i.TagsString])\n                    return\n                }\n            }\n            if (this.selectedMultiAction == \"ack\") {\n                if (!i.NeedAck) {\n                    this.$rootScope.appEvent('alert-error', [\"Action Error\", 'can not ack an alert that is already acknowledged: ' + i.AlertName + i.TagsString])\n                    return\n                }\n            }\n        }\n        this.showActionForm(incidents, this.selectedMultiAction)\n    }\n\n    // incidents can be an incident, but also an [] of incidents    \n    showActionForm(incidents, action) {\n        if (!Array.isArray(incidents)) {\n            incidents = [incidents]\n        }\n        var modalScope = this.$scope.$new();\n        modalScope.incidents = incidents;\n        modalScope.action = action;\n        this.utilSrv.showModal(event, {\n            src: \"public/plugins/bosun-app/panels/incident-list/modal_action.html\",\n            scope: modalScope\n        });\n    }\n\n    submitActionForm(incidents, action) {\n        var self = this;\n        if (!this.actionForm) {\n            self.$rootScope.appEvent('alert-error', ['Action Error', 'must fill out form fields'])\n        }\n        var actionForm = this.actionForm;\n        var actionRequest = {\n            Type: action,\n            User: actionForm.User,\n            Message: actionForm.Message,\n            Notify: actionForm.Notify == true,\n        }\n        actionRequest.Keys = _.map(incidents, (incident) => {\n            return incident.AlertName + incident.TagsString;\n        });\n        this.datasourceSrv.get(this.panel.datasource).\n            then(datasource => {\n                datasource.submitAction(actionRequest).then(() =>\n                    self.refreshData().then()\n                )\n            })\n    }\n\n\n    showBody(incident) {\n        this.datasourceSrv.get(this.panel.datasource).\n            then(datasource => {\n                datasource.AlertBodyHTML(incident.AlertName + incident.TagsString).then(data => {\n                    var modalScope = this.$rootScope.$new();\n                    modalScope.bodyHTML = data;\n                    this.utilSrv.showModal(event, {\n                        src: \"public/plugins/bosun-app/panels/incident-list/modal_body.html\",\n                        scope: modalScope\n                    });\n                })\n            });\n    }\n}\n\nBosunIncidentListCtrl.templateUrl = 'panels/incident-list/module.html';\n\nexport {\nBosunIncidentListCtrl,\nBosunIncidentListCtrl as PanelCtrl\n};"]}